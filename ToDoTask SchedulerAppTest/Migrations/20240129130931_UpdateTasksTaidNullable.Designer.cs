// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoTask_SchedulerAppTest.Data;

#nullable disable

namespace ToDoTask_SchedulerAppTest.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240129130931_UpdateTasksTaidNullable")]
    partial class UpdateTasksTaidNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Admins", b =>
                {
                    b.Property<int>("Aid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Aid"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Aid");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Logs", b =>
                {
                    b.Property<int>("Lid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Lid"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("datetime2");

                    b.Property<int>("LaAidAid")
                        .HasColumnType("int");

                    b.Property<int>("LuidUid")
                        .HasColumnType("int");

                    b.HasKey("Lid");

                    b.HasIndex("LaAidAid");

                    b.HasIndex("LuidUid");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Reminders", b =>
                {
                    b.Property<int>("Rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Rid"));

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RtidTid")
                        .HasColumnType("int");

                    b.Property<int>("RuidUid")
                        .HasColumnType("int");

                    b.HasKey("Rid");

                    b.HasIndex("RtidTid");

                    b.HasIndex("RuidUid");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Tasks", b =>
                {
                    b.Property<int>("Tid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tid"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TaidAid")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tid");

                    b.HasIndex("TaidAid");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.TasksGiven", b =>
                {
                    b.Property<int>("Tuid")
                        .HasColumnType("int");

                    b.Property<int>("Ttid")
                        .HasColumnType("int");

                    b.HasKey("Tuid", "Ttid");

                    b.HasIndex("Ttid");

                    b.ToTable("TasksGiven");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Users", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Logs", b =>
                {
                    b.HasOne("ToDoTask_SchedulerAppTest.Models.Admins", "LaAid")
                        .WithMany()
                        .HasForeignKey("LaAidAid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoTask_SchedulerAppTest.Models.Users", "Luid")
                        .WithMany()
                        .HasForeignKey("LuidUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaAid");

                    b.Navigation("Luid");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Reminders", b =>
                {
                    b.HasOne("ToDoTask_SchedulerAppTest.Models.Tasks", "Rtid")
                        .WithMany()
                        .HasForeignKey("RtidTid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoTask_SchedulerAppTest.Models.Users", "Ruid")
                        .WithMany()
                        .HasForeignKey("RuidUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rtid");

                    b.Navigation("Ruid");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Tasks", b =>
                {
                    b.HasOne("ToDoTask_SchedulerAppTest.Models.Admins", "Taid")
                        .WithMany()
                        .HasForeignKey("TaidAid");

                    b.Navigation("Taid");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.TasksGiven", b =>
                {
                    b.HasOne("ToDoTask_SchedulerAppTest.Models.Tasks", "Task")
                        .WithMany("TasksGivens")
                        .HasForeignKey("Ttid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoTask_SchedulerAppTest.Models.Users", "User")
                        .WithMany("TasksGivens")
                        .HasForeignKey("Tuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Tasks", b =>
                {
                    b.Navigation("TasksGivens");
                });

            modelBuilder.Entity("ToDoTask_SchedulerAppTest.Models.Users", b =>
                {
                    b.Navigation("TasksGivens");
                });
#pragma warning restore 612, 618
        }
    }
}
